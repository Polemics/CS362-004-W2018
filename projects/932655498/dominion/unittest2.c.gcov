        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test updated Coins function (line 1301 in dominion.c)
        -:    8://Reference & Citation testBuyCard.c ws used for info on how to set up a game for test
        -:    9:int main(int argc, char ** argv){
        1:   10:    printf("Unit Test 2: Beginning\n");
        -:   11:    
        -:   12:    struct gameState G;
        -:   13:    int i, n, r, p, deckCount, discardCount, handCount;
        1:   14:    int testGame, randInt = 0;
        -:   15:    
        1:   16:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   17:        remodel, smithy, village, baron, great_hall};
        -:   18:    
        1:   19:    randInt = rand() % 10;
        -:   20:    //Creating a test game
        1:   21:    testGame = initializeGame(2, k, randInt, &G);
        2:   22:    assert(testGame == 0);
        -:   23:    
        1:   24:    if (G.coins = 4){
        -:   25:        //printf("\nInitial Coins = %d\n", G.coins);
        -:   26:        //printf("Updating Coins by 1 using bonus parameter\n");
        1:   27:        updateCoins(0, &G, 1);
        2:   28:        assert(G.coins == 5);
        -:   29:        //printf("Updated Coins = %d\n", G.coins);
        -:   30:        //printf("Updating Coins by swapping card 0 with a gold\n");
        1:   31:        G.hand[0][0] = gold;
        1:   32:        updateCoins(0,&G,0);
        2:   33:        assert(G.coins == 7);
        -:   34:        //printf("Updating Coins by swapping card 1 with a silver\n");
        1:   35:        G.hand[0][1] = silver;
        1:   36:        updateCoins(0,&G,0);
        2:   37:        assert(G.coins == 8);
        -:   38:        //printf("Coins = %d\n", G.coins);
        1:   39:    }
        1:   40:    if (G.coins = 8) {
        1:   41:        printf("Unit Test 2: Passed updatedCoins()\n");
        1:   42:    }
        1:   43:    printf("Unit Test 2: Ended With Success\n");
        1:   44:    return 0;
        -:   45:}
