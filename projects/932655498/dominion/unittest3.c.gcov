        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test the isGameOver(...) function
        -:    8://Game is over when isGameOver returns 1 instead of 0
        -:    9://Reference & Citation testBuyCard.c ws used for info on how to set up a game for test
        -:   10:int main(int argc, char ** argv){
        1:   11:    printf("Unit Test 3: Beginning\n");
        -:   12:    
        -:   13:    struct gameState G;
        -:   14:    int i, n, r, p, deckCount, discardCount, handCount;
        1:   15:    int testGame, randInt = 0;
        -:   16:    
        1:   17:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   18:        remodel, smithy, village, baron, great_hall};
        -:   19:    
        1:   20:    randInt = rand() % 10;
        -:   21:    //Creating a test game
        1:   22:    testGame = initializeGame(2, k, randInt, &G);
        2:   23:    assert(testGame == 0);
        -:   24:    
        -:   25:    //Bring Providence Cards to 0 and see if the game ends
        1:   26:    int cardCount = 0;
        1:   27:    int gameIsOverBool = 0;
        -:   28:    
       10:   29:    for(cardCount = 3; cardCount >=0; cardCount--){
        4:   30:        G.supplyCount[province] = cardCount;
        4:   31:        gameIsOverBool = isGameOver(&G);
        4:   32:        printf("Unit Test 3: Providence card count: %d gameIsOverBool: %d\n",cardCount,gameIsOverBool);
        4:   33:    }
        2:   34:    assert(gameIsOverBool == 1);
        -:   35:    
        -:   36:    
        -:   37:    //Bring 3 supply piles to 0 and see if the game ends
        1:   38:    G.supplyCount[province] = 1; //set province count above 0 for next test
        1:   39:    gameIsOverBool = 1; //set game back to not over
        1:   40:    int j = 1;
       10:   41:    for(cardCount = 3; cardCount>=0; cardCount--){
        4:   42:        G.supplyCount[j] = cardCount;
        4:   43:        G.supplyCount[j+1] = cardCount;
        4:   44:        G.supplyCount[j+2] = cardCount;
        4:   45:        gameIsOverBool = isGameOver(&G);
        4:   46:        printf("Unit Test 3: Supply card count: %d gameIsOverBool: %d\n",cardCount,gameIsOverBool);
        4:   47:    }
        2:   48:    assert(gameIsOverBool == 1);
        1:   49:    printf("Unit Test 3: Ended With Success\n");
        -:   50:    
        1:   51:    return 0;
        -:   52:}
