        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7://Test Adventurer
        -:    8://Reference & Citation testBuyCard.c ws used for info on how to set up a game for test
        -:    9://NOTE: My Adventurer has a bug from assignment 2, it returns -1 instead of 0
        -:   10:/*
        -:   11: Adventurer: line 1182 changed second || operator to an && operator. This will cause the treasure counter to not increment unless the player draws a silver AND a gold... which isnâ€™t possible while drawing 1 card.
        -:   12: */
        -:   13:int main(int argc, char ** argv){
        1:   14:    printf("Card Test 2: Adventurer: Beginning\n");
        -:   15:    
        -:   16:    struct gameState G;
        -:   17:    int i, n, r, p, deckCount, discardCount, handCount;
        1:   18:    int testGame, randInt = 0;
        -:   19:    
        1:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   21:        remodel, smithy, village, baron, great_hall};
        -:   22:    
        1:   23:    randInt = rand() % 10;
        -:   24:    //Creating a test game
        1:   25:    testGame = initializeGame(2, k, randInt, &G);
        2:   26:    assert(testGame == 0);
        -:   27:    
        -:   28:    //variables for testing
        1:   29:    int adventurerResult = 2; //set at any number besides -1 or 0
        1:   30:    int currentPlayer = 0;
        -:   31:    int temphand[MAX_HAND];
        1:   32:    int z = 0; //counter for temp hand
        1:   33:    int drawntreasure = 0;
        -:   34:    int cardDrawn;
        -:   35:    
        1:   36:    adventurerResult = cardAdventurer(currentPlayer,temphand, z,&G,drawntreasure,cardDrawn);
        -:   37:    
        -:   38:    //printf("adventurerResult Is: %d\n", adventurerResult);
        1:   39:    if (adventurerResult == -1) {
    #####:   40:        printf("Card Test 2: Adventurer: -1 Returned, Test Failed\n");
    #####:   41:    } else {
        1:   42:        printf("Card Test 2: Adventurer: 0 Returned, Test Passed\n");
        -:   43:    }
        -:   44:    
        -:   45:    
        1:   46:    printf("Card Test 2: Adventurer: Ended\n");
        1:   47:    return 0;
        -:   48:}
        -:   49:
        -:   50:
