Begin Random Smithy Test
Hand Count test failed during 0
Deck Count test failed during 0
Hand Count test failed during 1
Deck Count test failed during 1
Hand Count test failed during 2
Deck Count test failed during 2
Hand Count test failed during 3
Deck Count test failed during 3
Hand Count test failed during 4
Deck Count test failed during 4
Hand Count test failed during 5
Deck Count test failed during 5
Hand Count test failed during 6
Deck Count test failed during 6
Hand Count test failed during 7
Deck Count test failed during 7
Hand Count test failed during 8
Deck Count test failed during 8
Hand Count test failed during 9
Deck Count test failed during 9
Hand Count test failed during 10
Deck Count test failed during 10
Hand Count test failed during 11
Deck Count test failed during 11
Hand Count test failed during 12
Deck Count test failed during 12
Hand Count test failed during 13
Deck Count test failed during 13
Hand Count test failed during 14
Deck Count test failed during 14
Hand Count test failed during 15
Deck Count test failed during 15
Hand Count test failed during 16
Deck Count test failed during 16
Hand Count test failed during 17
Deck Count test failed during 17
Hand Count test failed during 18
Deck Count test failed during 18
Hand Count test failed during 19
Deck Count test failed during 19
Hand Count test failed during 20
Deck Count test failed during 20
Hand Count test failed during 21
Deck Count test failed during 21
Hand Count test failed during 22
Deck Count test failed during 22
Hand Count test failed during 23
Deck Count test failed during 23
Hand Count test failed during 24
Deck Count test failed during 24
Hand Count test failed during 25
Deck Count test failed during 25
Hand Count test failed during 26
Deck Count test failed during 26
Hand Count test failed during 27
Deck Count test failed during 27
Hand Count test failed during 28
Deck Count test failed during 28
Hand Count test failed during 29
Deck Count test failed during 29
Hand Count test failed during 30
Deck Count test failed during 30
Hand Count test failed during 31
Deck Count test failed during 31
Hand Count test failed during 32
Deck Count test failed during 32
Hand Count test failed during 33
Deck Count test failed during 33
Hand Count test failed during 34
Deck Count test failed during 34
Hand Count test failed during 35
Deck Count test failed during 35
Hand Count test failed during 36
Deck Count test failed during 36
Hand Count test failed during 37
Deck Count test failed during 37
Hand Count test failed during 38
Deck Count test failed during 38
Hand Count test failed during 39
Deck Count test failed during 39
Hand Count test failed during 40
Deck Count test failed during 40
Hand Count test failed during 41
Deck Count test failed during 41
Hand Count test failed during 42
Deck Count test failed during 42
Hand Count test failed during 43
Deck Count test failed during 43
Hand Count test failed during 44
Deck Count test failed during 44
Hand Count test failed during 45
Deck Count test failed during 45
Hand Count test failed during 46
Deck Count test failed during 46
Hand Count test failed during 47
Deck Count test failed during 47
Hand Count test failed during 48
Deck Count test failed during 48
Hand Count test failed during 49
Deck Count test failed during 49
Hand Count test failed during 50
Deck Count test failed during 50
Hand Count test failed during 51
Deck Count test failed during 51
Hand Count test failed during 52
Deck Count test failed during 52
Hand Count test failed during 53
Deck Count test failed during 53
Hand Count test failed during 54
Deck Count test failed during 54
Hand Count test failed during 55
Deck Count test failed during 55
Hand Count test failed during 56
Deck Count test failed during 56
Hand Count test failed during 57
Deck Count test failed during 57
Hand Count test failed during 58
Deck Count test failed during 58
Hand Count test failed during 59
Deck Count test failed during 59
Hand Count test failed during 60
Deck Count test failed during 60
Hand Count test failed during 61
Deck Count test failed during 61
Hand Count test failed during 62
Deck Count test failed during 62
Hand Count test failed during 63
Deck Count test failed during 63
Hand Count test failed during 64
Deck Count test failed during 64
Hand Count test failed during 65
Deck Count test failed during 65
Hand Count test failed during 66
Deck Count test failed during 66
Hand Count test failed during 67
Deck Count test failed during 67
Hand Count test failed during 68
Deck Count test failed during 68
Hand Count test failed during 69
Deck Count test failed during 69
Hand Count test failed during 70
Deck Count test failed during 70
Hand Count test failed during 71
Deck Count test failed during 71
Hand Count test failed during 72
Deck Count test failed during 72
Hand Count test failed during 73
Deck Count test failed during 73
Hand Count test failed during 74
Deck Count test failed during 74
Hand Count test failed during 75
Deck Count test failed during 75
Hand Count test failed during 76
Deck Count test failed during 76
Hand Count test failed during 77
Deck Count test failed during 77
Hand Count test failed during 78
Deck Count test failed during 78
Hand Count test failed during 79
Deck Count test failed during 79
Hand Count test failed during 80
Deck Count test failed during 80
Hand Count test failed during 81
Deck Count test failed during 81
Hand Count test failed during 82
Deck Count test failed during 82
Hand Count test failed during 83
Deck Count test failed during 83
Hand Count test failed during 84
Deck Count test failed during 84
Hand Count test failed during 85
Deck Count test failed during 85
Hand Count test failed during 86
Deck Count test failed during 86
Hand Count test failed during 87
Deck Count test failed during 87
Hand Count test failed during 88
Deck Count test failed during 88
Hand Count test failed during 89
Deck Count test failed during 89
Hand Count test failed during 90
Deck Count test failed during 90
Hand Count test failed during 91
Deck Count test failed during 91
Hand Count test failed during 92
Deck Count test failed during 92
Hand Count test failed during 93
Deck Count test failed during 93
Hand Count test failed during 94
Deck Count test failed during 94
Hand Count test failed during 95
Deck Count test failed during 95
Hand Count test failed during 96
Deck Count test failed during 96
Hand Count test failed during 97
Deck Count test failed during 97
Hand Count test failed during 98
Deck Count test failed during 98
Hand Count test failed during 99
Deck Count test failed during 99
Hand Count test failed during 100
Deck Count test failed during 100
Hand Count test failed during 101
Deck Count test failed during 101
Hand Count test failed during 102
Deck Count test failed during 102
Hand Count test failed during 103
Deck Count test failed during 103
Hand Count test failed during 104
Deck Count test failed during 104
Hand Count test failed during 105
Deck Count test failed during 105
Hand Count test failed during 106
Deck Count test failed during 106
Hand Count test failed during 107
Deck Count test failed during 107
Hand Count test failed during 108
Deck Count test failed during 108
Hand Count test failed during 109
Deck Count test failed during 109
Hand Count test failed during 110
Deck Count test failed during 110
Hand Count test failed during 111
Deck Count test failed during 111
Hand Count test failed during 112
Deck Count test failed during 112
Hand Count test failed during 113
Deck Count test failed during 113
Hand Count test failed during 114
Deck Count test failed during 114
Hand Count test failed during 115
Deck Count test failed during 115
Hand Count test failed during 116
Deck Count test failed during 116
Hand Count test failed during 117
Deck Count test failed during 117
Hand Count test failed during 118
Deck Count test failed during 118
Hand Count test failed during 119
Deck Count test failed during 119
Hand Count test failed during 120
Deck Count test failed during 120
Hand Count test failed during 121
Deck Count test failed during 121
Hand Count test failed during 122
Deck Count test failed during 122
Hand Count test failed during 123
Deck Count test failed during 123
Hand Count test failed during 124
Deck Count test failed during 124
Hand Count test failed during 125
Deck Count test failed during 125
Hand Count test failed during 126
Deck Count test failed during 126
Hand Count test failed during 127
Deck Count test failed during 127
Hand Count test failed during 128
Deck Count test failed during 128
Hand Count test failed during 129
Deck Count test failed during 129
Hand Count test failed during 130
Deck Count test failed during 130
Hand Count test failed during 131
Deck Count test failed during 131
Hand Count test failed during 132
Deck Count test failed during 132
Hand Count test failed during 133
Deck Count test failed during 133
Hand Count test failed during 134
Deck Count test failed during 134
Hand Count test failed during 135
Deck Count test failed during 135
Hand Count test failed during 136
Deck Count test failed during 136
Hand Count test failed during 137
Deck Count test failed during 137
Hand Count test failed during 138
Deck Count test failed during 138
Hand Count test failed during 139
Deck Count test failed during 139
Hand Count test failed during 140
Deck Count test failed during 140
Hand Count test failed during 141
Deck Count test failed during 141
Hand Count test failed during 142
Deck Count test failed during 142
Hand Count test failed during 143
Deck Count test failed during 143
Hand Count test failed during 144
Deck Count test failed during 144
Hand Count test failed during 145
Deck Count test failed during 145
Hand Count test failed during 146
Deck Count test failed during 146
Hand Count test failed during 147
Deck Count test failed during 147
Hand Count test failed during 148
Deck Count test failed during 148
Hand Count test failed during 149
Deck Count test failed during 149
Hand Count test failed during 150
Deck Count test failed during 150
Hand Count test failed during 151
Deck Count test failed during 151
Hand Count test failed during 152
Deck Count test failed during 152
Hand Count test failed during 153
Deck Count test failed during 153
Hand Count test failed during 154
Deck Count test failed during 154
Hand Count test failed during 155
Deck Count test failed during 155
Hand Count test failed during 156
Deck Count test failed during 156
Hand Count test failed during 157
Deck Count test failed during 157
Hand Count test failed during 158
Deck Count test failed during 158
Hand Count test failed during 159
Deck Count test failed during 159
Hand Count test failed during 160
Deck Count test failed during 160
Hand Count test failed during 161
Deck Count test failed during 161
Hand Count test failed during 162
Deck Count test failed during 162
Hand Count test failed during 163
Deck Count test failed during 163
Hand Count test failed during 164
Deck Count test failed during 164
Hand Count test failed during 165
Deck Count test failed during 165
Hand Count test failed during 166
Deck Count test failed during 166
Hand Count test failed during 167
Deck Count test failed during 167
Hand Count test failed during 168
Deck Count test failed during 168
Hand Count test failed during 169
Deck Count test failed during 169
Hand Count test failed during 170
Deck Count test failed during 170
Hand Count test failed during 171
Deck Count test failed during 171
Hand Count test failed during 172
Deck Count test failed during 172
Hand Count test failed during 173
Deck Count test failed during 173
Hand Count test failed during 174
Deck Count test failed during 174
Hand Count test failed during 175
Deck Count test failed during 175
Hand Count test failed during 176
Deck Count test failed during 176
Hand Count test failed during 177
Deck Count test failed during 177
Hand Count test failed during 178
Deck Count test failed during 178
Hand Count test failed during 179
Deck Count test failed during 179
Hand Count test failed during 180
Deck Count test failed during 180
Hand Count test failed during 181
Deck Count test failed during 181
Hand Count test failed during 182
Deck Count test failed during 182
Hand Count test failed during 183
Deck Count test failed during 183
Hand Count test failed during 184
Deck Count test failed during 184
Hand Count test failed during 185
Deck Count test failed during 185
Hand Count test failed during 186
Deck Count test failed during 186
Hand Count test failed during 187
Deck Count test failed during 187
Hand Count test failed during 188
Deck Count test failed during 188
Hand Count test failed during 189
Deck Count test failed during 189
Hand Count test failed during 190
Deck Count test failed during 190
Hand Count test failed during 191
Deck Count test failed during 191
Hand Count test failed during 192
Deck Count test failed during 192
Hand Count test failed during 193
Deck Count test failed during 193
Hand Count test failed during 194
Deck Count test failed during 194
Hand Count test failed during 195
Deck Count test failed during 195
Hand Count test failed during 196
Deck Count test failed during 196
Hand Count test failed during 197
Deck Count test failed during 197
Hand Count test failed during 198
Deck Count test failed during 198
Hand Count test failed during 199
Deck Count test failed during 199
Hand Count test failed during 200
Deck Count test failed during 200
Hand Count test failed during 201
Deck Count test failed during 201
Hand Count test failed during 202
Deck Count test failed during 202
Hand Count test failed during 203
Deck Count test failed during 203
Hand Count test failed during 204
Deck Count test failed during 204
Hand Count test failed during 205
Deck Count test failed during 205
Hand Count test failed during 206
Deck Count test failed during 206
Hand Count test failed during 207
Deck Count test failed during 207
Hand Count test failed during 208
Deck Count test failed during 208
Hand Count test failed during 209
Deck Count test failed during 209
Hand Count test failed during 210
Deck Count test failed during 210
Hand Count test failed during 211
Deck Count test failed during 211
Hand Count test failed during 212
Deck Count test failed during 212
Hand Count test failed during 213
Deck Count test failed during 213
Hand Count test failed during 214
Deck Count test failed during 214
Hand Count test failed during 215
Deck Count test failed during 215
Hand Count test failed during 216
Deck Count test failed during 216
Hand Count test failed during 217
Deck Count test failed during 217
Hand Count test failed during 218
Deck Count test failed during 218
Hand Count test failed during 219
Deck Count test failed during 219
Hand Count test failed during 220
Deck Count test failed during 220
Hand Count test failed during 221
Deck Count test failed during 221
Hand Count test failed during 222
Deck Count test failed during 222
Hand Count test failed during 223
Deck Count test failed during 223
Hand Count test failed during 224
Deck Count test failed during 224
Hand Count test failed during 225
Deck Count test failed during 225
Hand Count test failed during 226
Deck Count test failed during 226
Hand Count test failed during 227
Deck Count test failed during 227
Hand Count test failed during 228
Deck Count test failed during 228
Hand Count test failed during 229
Deck Count test failed during 229
Hand Count test failed during 230
Deck Count test failed during 230
Hand Count test failed during 231
Deck Count test failed during 231
Hand Count test failed during 232
Deck Count test failed during 232
Hand Count test failed during 233
Deck Count test failed during 233
Hand Count test failed during 234
Deck Count test failed during 234
Hand Count test failed during 235
Deck Count test failed during 235
Hand Count test failed during 236
Deck Count test failed during 236
Hand Count test failed during 237
Deck Count test failed during 237
Hand Count test failed during 238
Deck Count test failed during 238
Hand Count test failed during 239
Deck Count test failed during 239
Hand Count test failed during 240
Deck Count test failed during 240
Hand Count test failed during 241
Deck Count test failed during 241
Hand Count test failed during 242
Deck Count test failed during 242
Hand Count test failed during 243
Deck Count test failed during 243
Hand Count test failed during 244
Deck Count test failed during 244
Hand Count test failed during 245
Deck Count test failed during 245
Hand Count test failed during 246
Deck Count test failed during 246
Hand Count test failed during 247
Deck Count test failed during 247
Hand Count test failed during 248
Deck Count test failed during 248
Hand Count test failed during 249
Deck Count test failed during 249
Hand Count test failed during 250
Deck Count test failed during 250
Hand Count test failed during 251
Deck Count test failed during 251
Hand Count test failed during 252
Deck Count test failed during 252
Hand Count test failed during 253
Deck Count test failed during 253
Hand Count test failed during 254
Deck Count test failed during 254
Hand Count test failed during 255
Deck Count test failed during 255
Hand Count test failed during 256
Deck Count test failed during 256
Hand Count test failed during 257
Deck Count test failed during 257
Hand Count test failed during 258
Deck Count test failed during 258
Hand Count test failed during 259
Deck Count test failed during 259
Hand Count test failed during 260
Deck Count test failed during 260
Hand Count test failed during 261
Deck Count test failed during 261
Hand Count test failed during 262
Deck Count test failed during 262
Hand Count test failed during 263
Deck Count test failed during 263
Hand Count test failed during 264
Deck Count test failed during 264
Hand Count test failed during 265
Deck Count test failed during 265
Hand Count test failed during 266
Deck Count test failed during 266
Hand Count test failed during 267
Deck Count test failed during 267
Hand Count test failed during 268
Deck Count test failed during 268
Hand Count test failed during 269
Deck Count test failed during 269
Hand Count test failed during 270
Deck Count test failed during 270
Hand Count test failed during 271
Deck Count test failed during 271
Hand Count test failed during 272
Deck Count test failed during 272
Hand Count test failed during 273
Deck Count test failed during 273
Hand Count test failed during 274
Deck Count test failed during 274
Hand Count test failed during 275
Deck Count test failed during 275
Hand Count test failed during 276
Deck Count test failed during 276
Hand Count test failed during 277
Deck Count test failed during 277
Hand Count test failed during 278
Deck Count test failed during 278
Hand Count test failed during 279
Deck Count test failed during 279
Hand Count test failed during 280
Deck Count test failed during 280
Hand Count test failed during 281
Deck Count test failed during 281
Hand Count test failed during 282
Deck Count test failed during 282
Hand Count test failed during 283
Deck Count test failed during 283
Hand Count test failed during 284
Deck Count test failed during 284
Hand Count test failed during 285
Deck Count test failed during 285
Hand Count test failed during 286
Deck Count test failed during 286
Hand Count test failed during 287
Deck Count test failed during 287
Hand Count test failed during 288
Deck Count test failed during 288
Hand Count test failed during 289
Deck Count test failed during 289
Hand Count test failed during 290
Deck Count test failed during 290
Hand Count test failed during 291
Deck Count test failed during 291
Hand Count test failed during 292
Deck Count test failed during 292
Hand Count test failed during 293
Deck Count test failed during 293
Hand Count test failed during 294
Deck Count test failed during 294
Hand Count test failed during 295
Deck Count test failed during 295
Hand Count test failed during 296
Deck Count test failed during 296
Hand Count test failed during 297
Deck Count test failed during 297
Hand Count test failed during 298
Deck Count test failed during 298
Hand Count test failed during 299
Deck Count test failed during 299
Hand Count test failed during 300
Deck Count test failed during 300
Hand Count test failed during 301
Deck Count test failed during 301
Hand Count test failed during 302
Deck Count test failed during 302
Hand Count test failed during 303
Deck Count test failed during 303
Hand Count test failed during 304
Deck Count test failed during 304
Hand Count test failed during 305
Deck Count test failed during 305
Hand Count test failed during 306
Deck Count test failed during 306
Hand Count test failed during 307
Deck Count test failed during 307
Hand Count test failed during 308
Deck Count test failed during 308
Hand Count test failed during 309
Deck Count test failed during 309
Hand Count test failed during 310
Deck Count test failed during 310
Hand Count test failed during 311
Deck Count test failed during 311
Hand Count test failed during 312
Deck Count test failed during 312
Hand Count test failed during 313
Deck Count test failed during 313
Hand Count test failed during 314
Deck Count test failed during 314
Hand Count test failed during 315
Deck Count test failed during 315
Hand Count test failed during 316
Deck Count test failed during 316
Hand Count test failed during 317
Deck Count test failed during 317
Hand Count test failed during 318
Deck Count test failed during 318
Hand Count test failed during 319
Deck Count test failed during 319
Hand Count test failed during 320
Deck Count test failed during 320
Hand Count test failed during 321
Deck Count test failed during 321
Hand Count test failed during 322
Deck Count test failed during 322
Hand Count test failed during 323
Deck Count test failed during 323
Hand Count test failed during 324
Deck Count test failed during 324
Hand Count test failed during 325
Deck Count test failed during 325
Hand Count test failed during 326
Deck Count test failed during 326
Hand Count test failed during 327
Deck Count test failed during 327
Hand Count test failed during 328
Deck Count test failed during 328
Hand Count test failed during 329
Deck Count test failed during 329
Hand Count test failed during 330
Deck Count test failed during 330
Hand Count test failed during 331
Deck Count test failed during 331
Hand Count test failed during 332
Deck Count test failed during 332
Hand Count test failed during 333
Deck Count test failed during 333
Hand Count test failed during 334
Deck Count test failed during 334
Hand Count test failed during 335
Deck Count test failed during 335
Hand Count test failed during 336
Deck Count test failed during 336
Hand Count test failed during 337
Deck Count test failed during 337
Hand Count test failed during 338
Deck Count test failed during 338
Hand Count test failed during 339
Deck Count test failed during 339
Hand Count test failed during 340
Deck Count test failed during 340
Hand Count test failed during 341
Deck Count test failed during 341
Hand Count test failed during 342
Deck Count test failed during 342
Hand Count test failed during 343
Deck Count test failed during 343
Hand Count test failed during 344
Deck Count test failed during 344
Hand Count test failed during 345
Deck Count test failed during 345
Hand Count test failed during 346
Deck Count test failed during 346
Hand Count test failed during 347
Deck Count test failed during 347
Hand Count test failed during 348
Deck Count test failed during 348
Hand Count test failed during 349
Deck Count test failed during 349
Hand Count test failed during 350
Deck Count test failed during 350
Hand Count test failed during 351
Deck Count test failed during 351
Hand Count test failed during 352
Deck Count test failed during 352
Hand Count test failed during 353
Deck Count test failed during 353
Hand Count test failed during 354
Deck Count test failed during 354
Hand Count test failed during 355
Deck Count test failed during 355
Hand Count test failed during 356
Deck Count test failed during 356
Hand Count test failed during 357
Deck Count test failed during 357
Hand Count test failed during 358
Deck Count test failed during 358
Hand Count test failed during 359
Deck Count test failed during 359
Hand Count test failed during 360
Deck Count test failed during 360
Hand Count test failed during 361
Deck Count test failed during 361
Hand Count test failed during 362
Deck Count test failed during 362
Hand Count test failed during 363
Deck Count test failed during 363
Hand Count test failed during 364
Deck Count test failed during 364
Hand Count test failed during 365
Deck Count test failed during 365
Hand Count test failed during 366
Deck Count test failed during 366
Hand Count test failed during 367
Deck Count test failed during 367
Hand Count test failed during 368
Deck Count test failed during 368
Hand Count test failed during 369
Deck Count test failed during 369
Hand Count test failed during 370
Deck Count test failed during 370
Hand Count test failed during 371
Deck Count test failed during 371
Hand Count test failed during 372
Deck Count test failed during 372
Hand Count test failed during 373
Deck Count test failed during 373
Hand Count test failed during 374
Deck Count test failed during 374
Hand Count test failed during 375
Deck Count test failed during 375
Hand Count test failed during 376
Deck Count test failed during 376
Hand Count test failed during 377
Deck Count test failed during 377
Hand Count test failed during 378
Deck Count test failed during 378
Hand Count test failed during 379
Deck Count test failed during 379
Hand Count test failed during 380
Deck Count test failed during 380
Hand Count test failed during 381
Deck Count test failed during 381
Hand Count test failed during 382
Deck Count test failed during 382
Hand Count test failed during 383
Deck Count test failed during 383
Hand Count test failed during 384
Deck Count test failed during 384
Hand Count test failed during 385
Deck Count test failed during 385
Hand Count test failed during 386
Deck Count test failed during 386
Hand Count test failed during 387
Deck Count test failed during 387
Hand Count test failed during 388
Deck Count test failed during 388
Hand Count test failed during 389
Deck Count test failed during 389
Hand Count test failed during 390
Deck Count test failed during 390
Hand Count test failed during 391
Deck Count test failed during 391
Hand Count test failed during 392
Deck Count test failed during 392
Hand Count test failed during 393
Deck Count test failed during 393
Hand Count test failed during 394
Deck Count test failed during 394
Hand Count test failed during 395
Deck Count test failed during 395
Hand Count test failed during 396
Deck Count test failed during 396
Hand Count test failed during 397
Deck Count test failed during 397
Hand Count test failed during 398
Deck Count test failed during 398
Hand Count test failed during 399
Deck Count test failed during 399
Hand Count test failed during 400
Deck Count test failed during 400
Hand Count test failed during 401
Deck Count test failed during 401
Hand Count test failed during 402
Deck Count test failed during 402
Hand Count test failed during 403
Deck Count test failed during 403
Hand Count test failed during 404
Deck Count test failed during 404
Hand Count test failed during 405
Deck Count test failed during 405
Hand Count test failed during 406
Deck Count test failed during 406
Hand Count test failed during 407
Deck Count test failed during 407
Hand Count test failed during 408
Deck Count test failed during 408
Hand Count test failed during 409
Deck Count test failed during 409
Hand Count test failed during 410
Deck Count test failed during 410
Hand Count test failed during 411
Deck Count test failed during 411
Hand Count test failed during 412
Deck Count test failed during 412
Hand Count test failed during 413
Deck Count test failed during 413
Hand Count test failed during 414
Deck Count test failed during 414
Hand Count test failed during 415
Deck Count test failed during 415
Hand Count test failed during 416
Deck Count test failed during 416
Hand Count test failed during 417
Deck Count test failed during 417
Hand Count test failed during 418
Deck Count test failed during 418
Hand Count test failed during 419
Deck Count test failed during 419
Hand Count test failed during 420
Deck Count test failed during 420
Hand Count test failed during 421
Deck Count test failed during 421
Hand Count test failed during 422
Deck Count test failed during 422
Hand Count test failed during 423
Deck Count test failed during 423
Hand Count test failed during 424
Deck Count test failed during 424
Hand Count test failed during 425
Deck Count test failed during 425
Hand Count test failed during 426
Deck Count test failed during 426
Hand Count test failed during 427
Deck Count test failed during 427
Hand Count test failed during 428
Deck Count test failed during 428
Hand Count test failed during 429
Deck Count test failed during 429
Hand Count test failed during 430
Deck Count test failed during 430
Hand Count test failed during 431
Deck Count test failed during 431
Hand Count test failed during 432
Deck Count test failed during 432
Hand Count test failed during 433
Deck Count test failed during 433
Hand Count test failed during 434
Deck Count test failed during 434
Hand Count test failed during 435
Deck Count test failed during 435
Hand Count test failed during 436
Deck Count test failed during 436
Hand Count test failed during 437
Deck Count test failed during 437
Hand Count test failed during 438
Deck Count test failed during 438
Hand Count test failed during 439
Deck Count test failed during 439
Hand Count test failed during 440
Deck Count test failed during 440
Hand Count test failed during 441
Deck Count test failed during 441
Hand Count test failed during 442
Deck Count test failed during 442
Hand Count test failed during 443
Deck Count test failed during 443
Hand Count test failed during 444
Deck Count test failed during 444
Hand Count test failed during 445
Deck Count test failed during 445
Hand Count test failed during 446
Deck Count test failed during 446
Hand Count test failed during 447
Deck Count test failed during 447
Hand Count test failed during 448
Deck Count test failed during 448
Hand Count test failed during 449
Deck Count test failed during 449
Hand Count test failed during 450
Deck Count test failed during 450
Hand Count test failed during 451
Deck Count test failed during 451
Hand Count test failed during 452
Deck Count test failed during 452
Hand Count test failed during 453
Deck Count test failed during 453
Hand Count test failed during 454
Deck Count test failed during 454
Hand Count test failed during 455
Deck Count test failed during 455
Hand Count test failed during 456
Deck Count test failed during 456
Hand Count test failed during 457
Deck Count test failed during 457
Hand Count test failed during 458
Deck Count test failed during 458
Hand Count test failed during 459
Deck Count test failed during 459
Hand Count test failed during 460
Deck Count test failed during 460
Hand Count test failed during 461
Deck Count test failed during 461
Hand Count test failed during 462
Deck Count test failed during 462
Hand Count test failed during 463
Deck Count test failed during 463
Hand Count test failed during 464
Deck Count test failed during 464
Hand Count test failed during 465
Deck Count test failed during 465
Hand Count test failed during 466
Deck Count test failed during 466
Hand Count test failed during 467
Deck Count test failed during 467
Hand Count test failed during 468
Deck Count test failed during 468
Hand Count test failed during 469
Deck Count test failed during 469
Hand Count test failed during 470
Deck Count test failed during 470
Hand Count test failed during 471
Deck Count test failed during 471
Hand Count test failed during 472
Deck Count test failed during 472
Hand Count test failed during 473
Deck Count test failed during 473
Hand Count test failed during 474
Deck Count test failed during 474
Hand Count test failed during 475
Deck Count test failed during 475
Hand Count test failed during 476
Deck Count test failed during 476
Hand Count test failed during 477
Deck Count test failed during 477
Hand Count test failed during 478
Deck Count test failed during 478
Hand Count test failed during 479
Deck Count test failed during 479
Hand Count test failed during 480
Deck Count test failed during 480
Hand Count test failed during 481
Deck Count test failed during 481
Hand Count test failed during 482
Deck Count test failed during 482
Hand Count test failed during 483
Deck Count test failed during 483
Hand Count test failed during 484
Deck Count test failed during 484
Hand Count test failed during 485
Deck Count test failed during 485
Hand Count test failed during 486
Deck Count test failed during 486
Hand Count test failed during 487
Deck Count test failed during 487
Hand Count test failed during 488
Deck Count test failed during 488
Hand Count test failed during 489
Deck Count test failed during 489
Hand Count test failed during 490
Deck Count test failed during 490
Hand Count test failed during 491
Deck Count test failed during 491
Hand Count test failed during 492
Deck Count test failed during 492
Hand Count test failed during 493
Deck Count test failed during 493
Hand Count test failed during 494
Deck Count test failed during 494
Hand Count test failed during 495
Deck Count test failed during 495
Hand Count test failed during 496
Deck Count test failed during 496
Hand Count test failed during 497
Deck Count test failed during 497
Hand Count test failed during 498
Deck Count test failed during 498
Hand Count test failed during 499
Deck Count test failed during 499
Number of Tests Completed: 500
End Smithy Test
File 'dominion.c'
Lines executed:25.19% of 647
Branches executed:24.70% of 417
Taken at least once:17.51% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 24817 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
    24817:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 2%
branch  1 taken 98%
      498:   10:    return 1;
    24319:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     8650:   12:    return -1;
    15669:   13:  return 0;
    24817:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 550 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      550:   44:  SelectStream(1);
      550:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1100:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      550:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    12100:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
   121000:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
   104500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    55000:   65:        }
     5500:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      550:   73:  if (numPlayers == 2)
branch  0 taken 31%
branch  1 taken 69%
        -:   74:    {
      172:   75:      state->supplyCount[curse] = 10;
      172:   76:    }
      378:   77:  else if (numPlayers == 3)
branch  0 taken 54%
branch  1 taken 46%
        -:   78:    {
      203:   79:      state->supplyCount[curse] = 20;
      203:   80:    }
        -:   81:  else
        -:   82:    {
      175:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      550:   87:  if (numPlayers == 2)
branch  0 taken 31%
branch  1 taken 69%
        -:   88:    {
      172:   89:      state->supplyCount[estate] = 8;
      172:   90:      state->supplyCount[duchy] = 8;
      172:   91:      state->supplyCount[province] = 8;
      172:   92:    }
        -:   93:  else
        -:   94:    {
      378:   95:      state->supplyCount[estate] = 12;
      378:   96:      state->supplyCount[duchy] = 12;
      378:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      550:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      550:  102:  state->supplyCount[silver] = 40;
      550:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    23100:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
   184800:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7%
        -:  109:	{
    86350:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     9350:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 89%
branch  1 taken 11%
branch  2 taken 13%
branch  3 taken 88%
        -:  114:		{
     1100:  115:		  if (numPlayers == 2){ 
branch  0 taken 31%
branch  1 taken 69%
      344:  116:		    state->supplyCount[i] = 8; 
      344:  117:		  }
      756:  118:		  else{ state->supplyCount[i] = 12; }
     1100:  119:		}
        -:  120:	      else
        -:  121:		{
     3850:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     4950:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    81400:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    81400:  130:	}
        -:  131:
    11000:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4406:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  139:    {
     1653:  140:      state->deckCount[i] = 0;
    13224:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
     4959:  143:	  state->deck[i][j] = estate;
     4959:  144:	  state->deckCount[i]++;
     4959:  145:	}
    26448:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
    11571:  148:	  state->deck[i][j] = copper;
    11571:  149:	  state->deckCount[i]++;		
    11571:  150:	}
     1653:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4406:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  155:    {
     1653:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     1653:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4406:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1653:  166:      state->handCount[i] = 0;
     1653:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     1653:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    30800:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
    14850:  178:      state->embargoTokens[i] = 0;
    14850:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      550:  182:  state->outpostPlayed = 0;
      550:  183:  state->phase = 0;
      550:  184:  state->numActions = 1;
      550:  185:  state->numBuys = 1;
      550:  186:  state->playedCardCount = 0;
      550:  187:  state->whoseTurn = 0;
      550:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6600:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     2750:  193:    drawCard(state->whoseTurn, state);
     2750:  194:  }
        -:  195:
      550:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      550:  198:  return 0;
      550:  199:}
        -:  200:
function shuffle called 1657 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1657:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1657:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
     1657:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    38056:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
    17371:  215:    card = floor(Random() * state->deckCount[player]);
    17371:  216:    newDeck[newDeckPos] = state->deck[player][card];
    17371:  217:    newDeckPos++;
   198818:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 83%
branch  1 taken 17%
    82038:  219:      state->deck[player][i] = state->deck[player][i+1];
    82038:  220:    }
    17371:  221:    state->deckCount[player]--;
        -:  222:  }
    38056:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
    17371:  224:    state->deck[player][i] = newDeck[i];
    17371:  225:    state->deckCount[player]++;
    17371:  226:  }
        -:  227:
     1657:  228:  return 0;
     1657:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
    #####:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 550 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
      550:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 6300 returned 100% blocks executed 91%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     6300:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1690:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1%
      841:  534:      state->deck[player][i] = state->discard[player][i];
      841:  535:      state->discard[player][i] = -1;
      841:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        4:  565:  }
        -:  566:
        -:  567:  else{
     6296:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     6296:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     6296:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     6296:  576:    state->deckCount[player]--;
     6296:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     6300:  580:  return 0;
     6300:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
        -:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    #####:  644:}
        -:  645:
function cardEffect called 550 returned 100% blocks executed 3%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{ 
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      550:  653:  int currentPlayer = whoseTurn(state);
      550:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      550:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      550:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
      550:  660:  int z = 0;// this is the counter for the temp hand
      550:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37%
branch  1 taken 63%
      202:  662:    nextPlayer = 0;
      202:  663:  }
        -:  664:
        -:  665:  // Function prototypes for refactored code for card effects 
        -:  666:  void adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[], int z);
        -:  667:  void smithyEffect(int currentPlayer, int handPos, struct gameState *state);
        -:  668:  void stewardEffect(int choice1, int choice2, int choice3, int currentPlayer, int handPos, struct gameState *state);
        -:  669:  void salvagerEffect(int choice1, int currentPlayer, int handPos, struct gameState *state);
        -:  670:  void outpostEffect(int currentPlayer, int handPos, struct gameState *state);
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
      550:  673:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 91%
branch  7 taken 9%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  674:  {
        -:  675:    case adventurer: 
        -:  676:        // Case refactored to instead call adventurerEffect() 
    #####:  677:        adventurerEffect(drawntreasure, currentPlayer, state, temphand, z);
    #####:  678:        return 0;
        -:  679:			
        -:  680:    case council_room:
        -:  681:      //+4 Cards
    #####:  682:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  683:	{
    #####:  684:	  drawCard(currentPlayer, state);
    #####:  685:	}
        -:  686:			
        -:  687:      //+1 Buy
    #####:  688:      state->numBuys++;
        -:  689:			
        -:  690:      //Each other player draws a card
    #####:  691:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  692:	{
    #####:  693:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  694:	    {
    #####:  695:	      drawCard(i, state);
    #####:  696:	    }
    #####:  697:	}
        -:  698:			
        -:  699:      //put played card in played card pile
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
        -:  701:			
    #####:  702:      return 0;
        -:  703:			
        -:  704:    case feast:
        -:  705:      //gain card with cost up to 5
        -:  706:      //Backup hand
    #####:  707:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  708:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  709:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  710:      }
        -:  711:      //Backup hand
        -:  712:
        -:  713:      //Update Coins for Buy
    #####:  714:      updateCoins(currentPlayer, state, 5);
    #####:  715:      x = 1;//Condition to loop on
    #####:  716:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  717:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  718:	  if (DEBUG)
        -:  719:	    printf("None of that card left, sorry!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  723:	  }
    #####:  724:	}
    #####:  725:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  726:	  printf("That card is too expensive!\n");
        -:  727:
        -:  728:	  if (DEBUG){
        -:  729:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  730:	  }
    #####:  731:	}
        -:  732:	else{
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
    #####:  738:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  739:	  x = 0;//No more buying cards
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  743:	  }
        -:  744:
        -:  745:	}
        -:  746:      }     
        -:  747:
        -:  748:      //Reset Hand
    #####:  749:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  750:	state->hand[currentPlayer][i] = temphand[i];
    #####:  751:	temphand[i] = -1;
    #####:  752:      }
        -:  753:      //Reset Hand
        -:  754:      			
    #####:  755:      return 0;
        -:  756:			
        -:  757:    case gardens:
    #####:  758:      return -1;
        -:  759:			
        -:  760:    case mine:
    #####:  761:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  762:
    #####:  763:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  764:	{
    #####:  765:	  return -1;
        -:  766:	}
        -:  767:		
    #####:  768:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  769:	{
    #####:  770:	  return -1;
        -:  771:	}
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 2, currentPlayer);
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
    #####:  789:	      break;
        -:  790:	    }
    #####:  791:	}
        -:  792:			
    #####:  793:      return 0;
        -:  794:			
        -:  795:    case remodel:
    #####:  796:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  797:
    #####:  798:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  return -1;
        -:  801:	}
        -:  802:
    #####:  803:      gainCard(choice2, state, 0, currentPlayer);
        -:  804:
        -:  805:      //discard card from hand
    #####:  806:      discardCard(handPos, currentPlayer, state, 0);
        -:  807:
        -:  808:      //discard trashed card
    #####:  809:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  810:	{
    #####:  811:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  812:	    {
    #####:  813:	      discardCard(i, currentPlayer, state, 0);			
    #####:  814:	      break;
        -:  815:	    }
    #####:  816:	}
        -:  817:
        -:  818:
    #####:  819:      return 0;
        -:  820:		
        -:  821:    case smithy:
        -:  822:        // Case refactored to call smithyEffect()
      500:  823:        smithyEffect(currentPlayer, handPos, state);
      500:  824:        return 0;
        -:  825:		
        -:  826:    case village:
        -:  827:      //+1 Card
       50:  828:      drawCard(currentPlayer, state);
        -:  829:			
        -:  830:      //+2 Actions
       50:  831:      state->numActions = state->numActions + 2;
        -:  832:			
        -:  833:      //discard played card from hand
       50:  834:      discardCard(handPos, currentPlayer, state, 0);
       50:  835:      return 0;
        -:  836:		
        -:  837:    case baron:
    #####:  838:      state->numBuys++;//Increase buys by 1!
    #####:  839:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  840:	int p = 0;//Iterator for hand!
    #####:  841:	int card_not_discarded = 1;//Flag for discard set!
    #####:  842:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  843:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  844:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  845:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  846:	    state->discardCount[currentPlayer]++;
    #####:  847:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  848:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  849:	    }
    #####:  850:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  851:	    state->handCount[currentPlayer]--;
    #####:  852:	    card_not_discarded = 0;//Exit the loop
    #####:  853:	  }
    #####:  854:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  855:	    if(DEBUG) {
        -:  856:	      printf("No estate cards in your hand, invalid choice\n");
        -:  857:	      printf("Must gain an estate if there are any\n");
        -:  858:	    }
    #####:  859:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  860:	      gainCard(estate, state, 0, currentPlayer);
    #####:  861:	      state->supplyCount[estate]--;//Decrement estates
    #####:  862:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  863:		isGameOver(state);
    #####:  864:	      }
    #####:  865:	    }
    #####:  866:	    card_not_discarded = 0;//Exit the loop
    #####:  867:	  }
        -:  868:			    
        -:  869:	  else{
    #####:  870:	    p++;//Next card
        -:  871:	  }
        -:  872:	}
    #####:  873:      }
        -:  874:			    
        -:  875:      else{
    #####:  876:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  877:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  878:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  879:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  880:	    isGameOver(state);
    #####:  881:	  }
    #####:  882:	}
        -:  883:      }
        -:  884:	    
        -:  885:      
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case great_hall:
        -:  889:      //+1 Card
    #####:  890:      drawCard(currentPlayer, state);
        -:  891:			
        -:  892:      //+1 Actions
    #####:  893:      state->numActions++;
        -:  894:			
        -:  895:      //discard card from hand
    #####:  896:      discardCard(handPos, currentPlayer, state, 0);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case minion:
        -:  900:      //+1 action
    #####:  901:      state->numActions++;
        -:  902:			
        -:  903:      //discard card from hand
    #####:  904:      discardCard(handPos, currentPlayer, state, 0);
        -:  905:			
    #####:  906:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  907:	{
    #####:  908:	  state->coins = state->coins + 2;
    #####:  909:	}
        -:  910:			
    #####:  911:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  912:	{
        -:  913:	  //discard hand
    #####:  914:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(handPos, currentPlayer, state, 0);
        -:  917:	    }
        -:  918:				
        -:  919:	  //draw 4
    #####:  920:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  921:	    {
    #####:  922:	      drawCard(currentPlayer, state);
    #####:  923:	    }
        -:  924:				
        -:  925:	  //other players discard hand and redraw if hand size > 4
    #####:  926:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  927:	    {
    #####:  928:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  929:		{
    #####:  930:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  931:		    {
        -:  932:		      //discard hand
    #####:  933:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  934:			{
    #####:  935:			  discardCard(handPos, i, state, 0);
        -:  936:			}
        -:  937:							
        -:  938:		      //draw 4
    #####:  939:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  940:			{
    #####:  941:			  drawCard(i, state);
    #####:  942:			}
    #####:  943:		    }
    #####:  944:		}
    #####:  945:	    }
        -:  946:				
    #####:  947:	}
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case steward:
        -:  951:        // Case refactored to call stewardEffect()
    #####:  952:        stewardEffect(choice1, choice2, choice3, currentPlayer, handPos, state);
    #####:  953:        return 0;
        -:  954:		
        -:  955:    case tribute:
    #####:  956:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  957:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  958:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  959:	  state->deckCount[nextPlayer]--;
    #####:  960:	}
    #####:  961:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  962:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  963:	  state->discardCount[nextPlayer]--;
    #####:  964:	}
        -:  965:	else{
        -:  966:	  //No Card to Reveal
        -:  967:	  if (DEBUG){
        -:  968:	    printf("No cards to reveal\n");
        -:  969:	  }
        -:  970:	}
    #####:  971:      }
        -:  972:	    
        -:  973:      else{
    #####:  974:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  975:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  976:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  977:	    state->deckCount[nextPlayer]++;
    #####:  978:	    state->discard[nextPlayer][i] = -1;
    #####:  979:	    state->discardCount[nextPlayer]--;
    #####:  980:	  }
        -:  981:			    
    #####:  982:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  983:	} 
    #####:  984:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  985:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  986:	state->deckCount[nextPlayer]--;
    #####:  987:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  988:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  989:	state->deckCount[nextPlayer]--;
        -:  990:      }    
        -:  991:		       
    #####:  992:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  993:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  994:	state->playedCardCount++;
    #####:  995:	tributeRevealedCards[1] = -1;
    #####:  996:      }
        -:  997:
    #####:  998:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  999:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1000:	  state->coins += 2;
    #####: 1001:	}
        -: 1002:		    
    #####: 1003:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1004:	  drawCard(currentPlayer, state);
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	}
        -: 1007:	else{//Action Card
    #####: 1008:	  state->numActions = state->numActions + 2;
        -: 1009:	}
    #####: 1010:      }
        -: 1011:	    
    #####: 1012:      return 0;
        -: 1013:		
        -: 1014:    case ambassador:
    #####: 1015:      j = 0;		//used to check if player has enough cards to discard
        -: 1016:
    #####: 1017:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1018:	{
    #####: 1019:	  return -1;				
        -: 1020:	}
        -: 1021:
    #####: 1022:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  return -1;
        -: 1025:	}
        -: 1026:
    #####: 1027:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
    #####: 1029:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1030:	    {
    #####: 1031:	      j++;
    #####: 1032:	    }
    #####: 1033:	}
    #####: 1034:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1035:	{
    #####: 1036:	  return -1;				
        -: 1037:	}
        -: 1038:
        -: 1039:      if (DEBUG) 
        -: 1040:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1041:
        -: 1042:      //increase supply count for choosen card by amount being discarded
    #####: 1043:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1044:			
        -: 1045:      //each other player gains a copy of revealed card
    #####: 1046:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1049:	    {
    #####: 1050:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1051:	    }
    #####: 1052:	}
        -: 1053:
        -: 1054:      //discard played card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1056:
        -: 1057:      //trash copies of cards returned to supply
    #####: 1058:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1059:	{
    #####: 1060:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1063:		{
    #####: 1064:		  discardCard(i, currentPlayer, state, 1);
    #####: 1065:		  break;
        -: 1066:		}
    #####: 1067:	    }
    #####: 1068:	}			
        -: 1069:
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case cutpurse:
        -: 1073:
    #####: 1074:      updateCoins(currentPlayer, state, 2);
    #####: 1075:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1078:	    {
    #####: 1079:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1080:		{
    #####: 1081:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1082:		    {
    #####: 1083:		      discardCard(j, i, state, 0);
    #####: 1084:		      break;
        -: 1085:		    }
    #####: 1086:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1087:		    {
    #####: 1088:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1089:			{
        -: 1090:			  if (DEBUG)
        -: 1091:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1092:			}	
    #####: 1093:		      break;
        -: 1094:		    }		
    #####: 1095:		}
        -: 1096:					
    #####: 1097:	    }
        -: 1098:				
    #####: 1099:	}				
        -: 1100:
        -: 1101:      //discard played card from hand
    #####: 1102:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1103:
    #####: 1104:      return 0;
        -: 1105:
        -: 1106:		
        -: 1107:    case embargo: 
        -: 1108:      //+2 Coins
    #####: 1109:      state->coins = state->coins + 2;
        -: 1110:			
        -: 1111:      //see if selected pile is in play
    #####: 1112:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;
        -: 1115:	}
        -: 1116:			
        -: 1117:      //add embargo token to selected supply pile
    #####: 1118:      state->embargoTokens[choice1]++;
        -: 1119:			
        -: 1120:      //trash card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case outpost:
    #####: 1125:        outpostEffect(currentPlayer, handPos, state);
    #####: 1126:        return 0;
        -: 1127:		
        -: 1128:    case salvager:
        -: 1129:        // Case refactored to call salvagerEffect()
    #####: 1130:        salvagerEffect(choice1, currentPlayer, handPos, state);
    #####: 1131:        return 0;
        -: 1132:		
        -: 1133:    case sea_hag:
    #####: 1134:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1135:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1136:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1137:	  state->discardCount[i]++;
    #####: 1138:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1139:	}
    #####: 1140:      }
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
    #####: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1164:	    }
        -: 1165:				
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
    #####: 1174:  return -1;
      550: 1175:}
        -: 1176:
function discardCard called 1050 returned 100% blocks executed 80%
        -: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:	
        -: 1180:    
        -: 1181:  //if card is not trashed, added to Played pile 
     1050: 1182:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1183:    { 
        -: 1184:      //add card to played pile
     1050: 1185:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1050: 1186:      state->playedCardCount++; 
     1050: 1187:    }
        -: 1188:	
        -: 1189:  //set played card to -1
     1050: 1190:  state->hand[currentPlayer][handPos] = -1;
        -: 1191:	
        -: 1192:  //remove card from player's hand
     1050: 1193:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1194:    {
        -: 1195:      //reduce number of cards in hand
    #####: 1196:      state->handCount[currentPlayer]--;
    #####: 1197:    }
     1050: 1198:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1199:    {
        -: 1200:      //reduce number of cards in hand
    #####: 1201:      state->handCount[currentPlayer]--;
    #####: 1202:    }
        -: 1203:  else 	
        -: 1204:    {
        -: 1205:      //replace discarded card with last card in hand
     1050: 1206:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1207:      //set last card to -1
     1050: 1208:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1209:      //reduce number of cards in hand
     1050: 1210:      state->handCount[currentPlayer]--;
        -: 1211:    }
        -: 1212:	
     1050: 1213:  return 0;
        -: 1214:}
        -: 1215:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1216:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1217:{
        -: 1218:  //Note: supplyPos is enum of choosen card
        -: 1219:	
        -: 1220:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1221:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1222:    {
    #####: 1223:      return -1;
        -: 1224:    }
        -: 1225:	
        -: 1226:  //added card for [whoseTurn] current player:
        -: 1227:  // toFlag = 0 : add to discard
        -: 1228:  // toFlag = 1 : add to deck
        -: 1229:  // toFlag = 2 : add to hand
        -: 1230:
    #####: 1231:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1232:    {
    #####: 1233:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1234:      state->deckCount[player]++;
    #####: 1235:    }
    #####: 1236:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1237:    {
    #####: 1238:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1239:      state->handCount[player]++;
    #####: 1240:    }
        -: 1241:  else
        -: 1242:    {
    #####: 1243:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1244:      state->discardCount[player]++;
        -: 1245:    }
        -: 1246:	
        -: 1247:  //decrease number in supply pile
    #####: 1248:  state->supplyCount[supplyPos]--;
        -: 1249:	 
    #####: 1250:  return 0;
    #####: 1251:}
        -: 1252:
function updateCoins called 550 returned 100% blocks executed 85%
        -: 1253:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1254:{
        -: 1255:  int i;
        -: 1256:	
        -: 1257:  //reset coin count
      550: 1258:  state->coins = 0;
        -: 1259:
        -: 1260:  //add coins for each Treasure card in player's hand
     6600: 1261:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1262:    {
     2750: 1263:      if (state->hand[player][i] == copper)
branch  0 taken 70%
branch  1 taken 30%
        -: 1264:	{
     1930: 1265:	  state->coins += 1;
     1930: 1266:	}
      820: 1267:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1268:	{
    #####: 1269:	  state->coins += 2;
    #####: 1270:	}
      820: 1271:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1272:	{
    #####: 1273:	  state->coins += 3;
    #####: 1274:	}	
     2750: 1275:    }	
        -: 1276:
        -: 1277:  //add bonus
      550: 1278:  state->coins += bonus;
        -: 1279:
      550: 1280:  return 0;
        -: 1281:}
        -: 1282:
        -: 1283:
        -: 1284://end of dominion.c
        -: 1285:
        -: 1286:/**************************************************************************************
        -: 1287:** Function: adventurerEffect()
        -: 1288:** Description: Function to create the effects associated with an adventurer card
        -: 1289:**************************************************************************************/
function adventurerEffect called 0 returned 0% blocks executed 0%
        -: 1290:void adventurerEffect(int drawntreasure, int currentPlayer, struct gameState *state, int temphand[], int z)
        -: 1291:{
        -: 1292:    int cardDrawn;
    #####: 1293:    while(drawntreasure < 3)
branch  0 never executed
branch  1 never executed
        -: 1294:    {
        -: 1295:        // If the deck is empty we need to shuffle discard and add to deck
    #####: 1296:	    if (state->deckCount[currentPlayer] < 1) 
branch  0 never executed
branch  1 never executed
    #####: 1297:	        shuffle(currentPlayer, state);
        -: 1298:	     
    #####: 1299:        drawCard(currentPlayer, state); 
        -: 1300:
        -: 1301:        // Top card of hand is most recently drawn card.
    #####: 1302:	    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];  
        -: 1303:
    #####: 1304:	    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1305:	        drawntreasure++;
        -: 1306:	    else
        -: 1307:        {
        -: 1308:            // Save drawn card so it can be removed
    #####: 1309:	        temphand[z] = cardDrawn;
        -: 1310:
        -: 1311:            // Remove the top card (the most recently drawn one).
    #####: 1312:	        state->handCount[currentPlayer]--; 
    #####: 1313:	        z++;
        -: 1314:	    }
        -: 1315:    }
        -: 1316:      
        -: 1317:    //printf("%d\n", z);
    #####: 1318:    while(z - 1 >= 0)
branch  0 never executed
branch  1 never executed
        -: 1319:    {
        -: 1320:        // Discard all cards in play that have been drawn     
    #####: 1321:	    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];    
    #####: 1322:	    z = z - 1;
        -: 1323:    } 
    #####: 1324:}
        -: 1325:
        -: 1326:
        -: 1327:/**************************************************************************************
        -: 1328:** Function: smithyEffect()
        -: 1329:** Description: Function to create the effects associated with a smithy card
        -: 1330:**************************************************************************************/
function smithyEffect called 500 returned 100% blocks executed 100%
        -: 1331:void smithyEffect(int currentPlayer, int handPos, struct gameState *state)
        -: 1332:{
        -: 1333:    // +3 Cards
        -: 1334:    int i;
     5000: 1335:    for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20%
     2000: 1336:	    drawCard(currentPlayer, state);
        -: 1337:			
        -: 1338:    // Discard card from hand
      500: 1339:    discardCard(handPos, currentPlayer, state, 0); 
      500: 1340:}
        -: 1341:
        -: 1342:
        -: 1343:/**************************************************************************************
        -: 1344:** Function: stewardEffect()
        -: 1345:** Description: Function to create the effects associated with a steward card
        -: 1346:**************************************************************************************/
function stewardEffect called 0 returned 0% blocks executed 0%
        -: 1347:void stewardEffect(int choice1, int choice2, int choice3, int currentPlayer, int handPos, struct gameState *state)
        -: 1348:{
    #####: 1349:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1350:	{
        -: 1351:	    // +2 cards
    #####: 1352:	    drawCard(currentPlayer, state);
    #####: 1353:	    drawCard(currentPlayer, state);
    #####: 1354:	}
    #####: 1355:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1356:	{
        -: 1357:	    // +2 coins
    #####: 1358:	    state->coins = state->coins + 2;
    #####: 1359:	}
        -: 1360:    else
        -: 1361:	{
        -: 1362:	    // Trash 2 cards in hand
    #####: 1363:	    discardCard(choice2, currentPlayer, state, 0);
    #####: 1364:	    discardCard(choice3, currentPlayer, state, 0);
        -: 1365:	}
        -: 1366:			
        -: 1367:    // Discard card from hand
    #####: 1368:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1369:} 
        -: 1370:
        -: 1371:
        -: 1372:/**************************************************************************************
        -: 1373:** Function: salvagerEffect()
        -: 1374:** Description: Function to create the effects associated with a salvager card
        -: 1375:**************************************************************************************/
function salvagerEffect called 0 returned 0% blocks executed 0%
        -: 1376:void salvagerEffect(int choice1, int currentPlayer, int handPos, struct gameState *state)
        -: 1377:{
        -: 1378:    // +1 buy
    #####: 1379:    state->numBuys--;
        -: 1380:			
    #####: 1381:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1382:	{
        -: 1383:	    // Gain coins equal to trashed card
    #####: 1384:	    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1385:
        -: 1386:	    // Trash card
    #####: 1387:	    discardCard(choice1, currentPlayer, state, 1);	
    #####: 1388:	}
        -: 1389:			
        -: 1390:      // Discard card
    #####: 1391:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1392:}
        -: 1393:
        -: 1394:/**************************************************************************************
        -: 1395:** Function: outpostEffect()
        -: 1396:** Description: Function to create the effects associated with an outpost card
        -: 1397:**************************************************************************************/
function outpostEffect called 0 returned 0% blocks executed 0%
        -: 1398:void outpostEffect(int currentPlayer, int handPos, struct gameState *state)
        -: 1399:{
        -: 1400:      
        -: 1401:      // Set outpost flag
    #####: 1402:      state->outpostPlayed++;
        -: 1403:      
        -: 1404:      // Discard card
    #####: 1405:      discardCard(handPos, currentPlayer, state, 0); 
    #####: 1406:} 
        -: 1407:
        -: 1408:
